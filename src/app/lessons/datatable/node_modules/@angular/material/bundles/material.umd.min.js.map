{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n  TemplateRef,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding, CdkTreeNode, CdkTree} from '@angular/cdk/tree';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, Input, Optional, Renderer2, ElementRef} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_treeNode: CdkTreeNode<T>,\n              _tree: CdkTree<T>,\n              _renderer: Renderer2,\n              _element: ElementRef,\n              @Optional() _dir: Directionality) {\n      super(_treeNode, _tree, _renderer, _element, _dir);\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewEncapsulation,\n  IterableDiffers,\n} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_differs: IterableDiffers, _changeDetectorRef: ChangeDetectorRef) {\n    super(_differs, _changeDetectorRef);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle, CdkTree, CdkTreeNode} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_tree: CdkTree<T>, _treeNode: CdkTreeNode<T>) {\n    super(_tree, _treeNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.6');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this.onTouched());\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338).\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n    this._appearance = value;\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef<HTMLElement>;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance !== 'outline') {\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","this","role","Number","tslib_1.__extends","type","Directive","args","selector","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","CdkTreeNode","useExisting","ElementRef","CdkTree","undefined","decorators","Attribute","Input","_MatTreeNodeMixinBase","MatTreeNodeDef","template","CdkTreeNodeDef","TemplateRef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","CdkNestedTreeNode","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","_treeNode","_renderer","_element","_dir","CdkTreeNodePadding","Renderer2","Directionality","Optional","level","indent","MatTree","_changeDetectorRef","Component","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatTreeNodeToggle","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabContent","MatTabBase","_MatTabMixinBase","mixinDisabled","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","ViewContainerRef","MatTabBody","Inject","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","NgZone","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatInkBar","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","id","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","allowChildren","MatSort","CdkColumnDef","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","Injectable","providedIn","MatStepperIntl","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","vertical","invert","MatSlider","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","sortButtonLabel","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","_checkOverlayWithinViewport","maxScroll","MatSelect","_calculateOverlayScroll","scrollBuffer","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_rectangleFillValue","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","chips","chip","MatChipList","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultTabIndex","_isSingleSelector","parsedTabIndex","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_appearance","appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","startWidth","gapWidth","startEls","gapEls","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}