{"version":3,"file":"cdk-observers.umd.min.js","sources":["../../src/cdk/observers/observe-content.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]> {\n    return Observable.create(observer => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._disabled) {\n      this._unsubscribe();\n    } else {\n      this._subscribe();\n    }\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver, private _elementRef: ElementRef,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef.nativeElement);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n"],"names":["MutationObserverFactory","prototype","create","callback","MutationObserver","type","Injectable","args","providedIn","ContentObserver","_mutationObserverFactory","this","_observedElements","Map","ngOnDestroy","_this","forEach","_","element","_cleanupObserver","observe","Observable","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","get","count","stream_1","Subject","mutations","next","characterData","childList","subtree","set","_a","disconnect","complete","delete","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","EventEmitter","_disabled","_currentSubscription","Object","defineProperty","value","coerceBooleanProperty","_unsubscribe","_subscribe","_debounce","coerceNumberProperty","ngAfterContentInit","disabled","nativeElement","runOutsideAngular","debounce","pipe","debounceTime","Directive","selector","exportAs","ElementRef","NgZone","Output","Input","ObserversModule","NgModule","exports","declarations","providers"],"mappings":";;;;;;;igBAAA,MA8BEA,GAAFC,UAAAC,OAAE,SAAOC,GACL,MAAmC,mBAArBC,kBAAmC,KAAO,GAAIA,kBAAiBD,mBAHjFE,KAACC,EAAAA,WAADC,OAAaC,WAAY,8GA5BzBR,kBA8CE,QAAFS,GAAsBC,GAAAC,KAAtBD,yBAAsBA,EANtBC,KAAAC,kBAA8B,GAAIC,KAxClC,MAgDEJ,GAAFR,UAAAa,YAAE,WAAA,GAAFC,GAAAJ,IACIA,MAAKC,kBAAkBI,QAAQ,SAACC,EAAGC,GAAY,MAAAH,GAAKI,iBAAiBD,MAOvET,EAAFR,UAAAmB,QAAE,SAAQF,GAAR,GAAFH,GAAAJ,IACI,OAAOU,GAAAA,WAAWnB,OAAO,SAAAoB,GACvB,GAAMC,GAASR,EAAKS,gBAAgBN,GAC9BO,EAAeF,EAAOG,UAAUJ,EAEtC,OAAO,YACLG,EAAaE,cACbZ,EAAKa,kBAAkBV,OASrBT,EAAVR,UAAAuB,gBAAA,SAA0BN,GACtB,GAAKP,KAAKC,kBAAkBiB,IAAIX,GAY9BP,KAAKC,kBAAkBkB,IAAIZ,GAAUa,YAZG,CACxC,GAAMC,GAAS,GAAIC,GAAAA,QACbX,EAAWX,KAAKD,yBAAyBR,OAAO,SAAAgC,GAAa,MAAAF,GAAOG,KAAKD,IAC3EZ,IACFA,EAASF,QAAQF,GACfkB,eAAe,EACfC,WAAW,EACXC,SAAS,IAGb3B,KAAKC,kBAAkB2B,IAAIrB,GAAUI,SAA3CA,EAAqDC,OAArDS,EAA6DD,MAAO,IAIhE,MAAOpB,MAAKC,kBAAkBkB,IAAIZ,GAAUK,QAOtCd,EAAVR,UAAA2B,kBAAA,SAA4BV,GACpBP,KAAKC,kBAAkBiB,IAAIX,OAC7BP,KAAKC,kBAAkBkB,IAAIZ,GAAUa,OAEnCpB,KAAKQ,iBAAiBD,KAMpBT,EAAVR,UAAAkB,iBAAA,SAA2BD,GACvB,GAAIP,KAAKC,kBAAkBiB,IAAIX,GAAU,CACvC,GAANsB,GAAA7B,KAAAC,kBAAAkB,IAAAZ,GAAaI,EAAbkB,EAAAlB,SAAuBC,EAAvBiB,EAAAjB,MACUD,IACFA,EAASmB,aAEXlB,EAAOmB,WACP/B,KAAKC,kBAAkB+B,OAAOzB,oBA1EpCb,KAACC,EAAAA,WAADC,OAAaC,WAAY,+CARzBH,KAAaL,qHA7BbS,kBA4JE,QAAFmC,GAAsBC,EAA2CC,EAC3CC,GADApC,KAAtBkC,iBAAsBA,EAA2ClC,KAAjEmC,YAAiEA,EAC3CnC,KAAtBoC,QAAsBA,EA9BtBpC,KAAAqC,MAAuC,GAAIC,GAAAA,aAgB3CtC,KAAAuC,WAAsB,EAWtBvC,KAAAwC,qBAAsD,KA1JtD,MAsIAC,QAAAC,eAAMT,EAAN3C,UAAA,gBAAA,WAAmB,MAAOU,MAAKuC,eAC7B,SAAaI,GACX3C,KAAKuC,UAAYK,EAAAA,sBAAsBD,GACnC3C,KAAKuC,UACPvC,KAAK6C,eAEL7C,KAAK8C,8CAOXL,OAAAC,eAAMT,EAAN3C,UAAA,gBAAA,WAA2B,MAAOU,MAAK+C,eACrC,SAAaJ,GACX3C,KAAK+C,UAAYC,EAAAA,qBAAqBL,GACtC3C,KAAK8C,8CASPb,EAAF3C,UAAA2D,mBAAE,WACOjD,KAAKwC,sBAAyBxC,KAAKkD,UACtClD,KAAK8C,cAITb,EAAF3C,UAAAa,YAAE,WACEH,KAAK6C,gBAGCZ,EAAV3C,UAAAwD,gCACI9C,MAAK6C,cACL,IAAMjC,GAASZ,KAAKkC,iBAAiBzB,QAAQT,KAAKmC,YAAYgB,cAM9DnD,MAAKoC,QAAQgB,kBAAkB,WAC7BhD,EAAKoC,sBACApC,EAAKiD,SAAWzC,EAAO0C,KAAKC,EAAAA,aAAanD,EAAKiD,WAAazC,GAAQG,UAAUX,EAAKiC,UAInFJ,EAAV3C,UAAAuD,wBACQ7C,KAAKwC,sBACPxC,KAAKwC,qBAAqBxB,8BAhEhCtB,KAAC8D,EAAAA,UAAD5D,OACE6D,SAAU,sBACVC,SAAU,4DArFZhE,KAAaI,IA1BbJ,KAAEiE,EAAAA,aAKFjE,KAAEkE,EAAAA,4BA8GFvB,QAAA3C,KAAGmE,EAAAA,OAAHjE,MAAU,uBAMVsD,WAAAxD,KAAGoE,EAAAA,MAAHlE,MAAS,+BAaTyD,WAAA3D,KAAGoE,EAAAA,SAlJH7B,KA6HA8B,EAAA,yBA7HA,sBA+LArE,KAACsE,EAAAA,SAADpE,OACEqE,SAAUhC,GACViC,cAAejC,GACfkC,WAAY9E,OAlMd0E"}